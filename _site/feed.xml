<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curtis</title>
    <description>Curtis&#39;s Blog</description>
    <link>http://chenbingshu.com///</link>
    <atom:link href="http://chenbingshu.com///feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 12 May 2016 17:21:29 +0800</pubDate>
    <lastBuildDate>Thu, 12 May 2016 17:21:29 +0800</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Performance Api在网页性能监测的使用和表现差异</title>
        <description>&lt;p&gt;##1. 为什么要做性能监测?&lt;/p&gt;

&lt;p&gt;著名的谁说过一句话，如果连性能问题在哪里都不知道，如何做优化？所以，性能监测很明显是为了性能优化！&lt;/p&gt;

&lt;p&gt;##2. Performance对象
html5提供了很多有利于前端攻城狮的webapi&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API&quot;&gt;(技术文档)&lt;/a&gt;
以下内容主要讲的是webapi的performace接口及相关使用&lt;/p&gt;

&lt;p&gt;在chrome控制台打印window.performance,可查看performance提供的api,如图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/20150510/obj.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;memory&lt;/strong&gt;	提供了3个参数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* jsHeapSizeLimit js内存使用大小限制
* totalJSHeapSize js总内存？？
* usedJSHeapSize  js已使用内存
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;navigation&lt;/strong&gt;对象提供了2个参数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* redirectCount
* type
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;redirectCount表示到达当前页面的重定向次数&lt;/p&gt;

&lt;p&gt;type&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0:正常的url访问或点击跳转&lt;/li&gt;
  &lt;li&gt;1:刷新页面&lt;/li&gt;
  &lt;li&gt;2:通过历史纪录访问当前页面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;onresourcetimingbufferfull&lt;/strong&gt;属性是一个事件监听函数，当&lt;strong&gt;resourcetimingbufferfull&lt;/strong&gt;事件被触发的时候调用。而
&lt;strong&gt;resourcetimingbufferfull&lt;/strong&gt;是在浏览器资源缓冲区蛮的时候触发&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;performance.onresourcetimingbufferfull = function(){}; **timing** 对象提供了一组页面资源加载过程中的用时参数,也是网页性能监测主要要用到的api


* 	connectEnd:1462861568320
* 	connectStart:1462861568320
* 	domComplete:1462861569995
* 	domContentLoadedEventEnd:1462861569578
* 	domContentLoadedEventStart:1462861569528
* 	domInteractive:1462861569528
* 	domLoading:1462861568659
* 	domainLookupEnd:1462861568320
* 	domainLookupStart:1462861568320
* 	fetchStart:1462861568320
* 	loadEventEnd:1462861570046
* 	loadEventStart:1462861569995
* 	navigationStart:1462861567902
* 	redirectEnd:0
* 	redirectStart:0
* 	requestStart:1462861568322
* 	responseEnd:1462861569171
* 	responseStart:1462861568656
* 	secureConnectionStart:0
* 	unloadEventEnd:0
* 	unloadEventStart:0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以下是来找磨叽啦（&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Performance&quot;&gt;mozilla&lt;/a&gt;）的一张关于这些参数的计时起止点:
&lt;img src=&quot;/images/post/20150510/illustration.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体资源的性能监测方法 getEntries():
通过该方法，可以获取到所有资源的加载用时等参数
var sourceEntries = window.performance.getEntries();
打印一下sourceEntries数组，可以获取到其成员包含以下属性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;connectEnd:119.33500000000001
connectStart:119.33500000000001
domainLookupEnd:119.33500000000001
domainLookupStart:119.33500000000001
duration:106.41499999999999
entryType:&quot;resource&quot;
fetchStart:119.33500000000001
initiatorType:&quot;link&quot;
name:&quot;http://****/m/css/common_lib_****/less/common/***.css&quot;
redirectEnd:0
redirectStart:0
requestStart:206.28000000000003
responseEnd:225.75
responseStart:215.60000000000002
secureConnectionStart:0
startTime:119.33500000000001
workerStart:0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;该方法能够获取到的资源有css,js,img,xmlhttprequest。这个方法基本能满足网页性能监测的要求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;打点方法:performance.now()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当然，如果以上的timing对象提供的参数不能满足你的特殊监测要求，你还可以使用performance的now方法来定制时间监测点；
如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var startTime = performance.now();
&amp;lt;script src=&#39;http://*****.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
var endTime = performance.now();
var jsLoadTime = endTime - startTime; 可以大致统计到js资源加载的时间
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##3. 浏览器支持&amp;amp;兼容
&lt;img src=&quot;/images/post/20150510/support.png&quot; alt=&quot;image&quot; /&gt;
在用于项目中使用的时候，发现getEntries方法紧在chrome支持，用于移动端性能监测时候，getEntries也只能在安卓手机获取到资源的时间参数，具体的资源还是只能靠打点来实现。我有什么办法呢？没有。做到后面发现主要的群体ios不能监测到。。。。白做了！！！&lt;/p&gt;
</description>
        <pubDate>Tue, 10 May 2016 18:10:11 +0800</pubDate>
        <link>http://chenbingshu.com///2016/performance_api%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E8%A1%A8%E7%8E%B0%E5%B7%AE%E5%BC%82/</link>
        <guid isPermaLink="true">http://chenbingshu.com///2016/performance_api%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E8%A1%A8%E7%8E%B0%E5%B7%AE%E5%BC%82/</guid>
        
        <category>性能监测</category>
        
        <category>performance</category>
        
        <category>兼容</category>
        
        
        <category>前端</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve --watch&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Jan 2016 23:04:23 +0800</pubDate>
        <link>http://chenbingshu.com///2016/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://chenbingshu.com///2016/welcome-to-jekyll/</guid>
        
        <category>jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
