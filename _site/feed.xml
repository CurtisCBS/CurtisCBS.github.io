<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curtis</title>
    <description>Curtis&#39;s Blog</description>
    <link>http://chenbingshu.com///</link>
    <atom:link href="http://chenbingshu.com///feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 29 May 2016 21:13:37 +0800</pubDate>
    <lastBuildDate>Sun, 29 May 2016 21:13:37 +0800</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>移动web开发者常用调试方法</title>
        <description>&lt;p&gt;#chrome插件开发&lt;/p&gt;

&lt;p&gt;移动web前端开发者经常会需要解决ios和安卓平台的兼容问题(主要还是安卓,嗯,没错)&lt;/p&gt;

&lt;p&gt;如果不能连接真机调试的话,一些比较奇葩的样式或缓存问题就需要开发者有足够的经验才能定位到问题;但是如果&lt;/p&gt;

&lt;p&gt;能通过wifi或usb连接电脑直接调试,就相对容易定位到问题。(文章开头真难写)&lt;/p&gt;

&lt;p&gt;这里主要介绍几种调试方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ios + safari(mac)&lt;/li&gt;
  &lt;li&gt;android + chrome&lt;/li&gt;
  &lt;li&gt;微信调试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##IOS+Safari 调试方法&lt;/p&gt;

&lt;p&gt;iso＋safari，两个苹果的亲儿子
/Users/bingshu/CurtisCBS/_posts/2016-05-12-chrome插件开发.md
首先打开ios的 设置－safari－高级－web检查器&lt;/p&gt;

&lt;p&gt;//此处应有一张图片&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/20150529/ios-setting.PNG&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把如上图的设置好之后，使用usb链接mac&lt;/p&gt;

&lt;p&gt;打开电脑的safari&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/20150529/mac-safari.PNG&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;safari的菜单栏－开发 就能看到链接的手机以及当前手机打开的网页&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/20150529/safari-debug.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;*缺点：只有当ios的safari等少部分支持的浏览器中打开支持这种调试方法，如微信和应用内webview很多都&lt;/p&gt;

&lt;p&gt;不支持这样调试，不过本人比较常用这种方法&lt;/p&gt;

&lt;p&gt;##android + chrome&lt;/p&gt;

&lt;p&gt;android(据说需要版本4.0以上)的调试方法首先需要将android机器设置到开发者模式&lt;/p&gt;

&lt;p&gt;方法：&lt;/p&gt;

&lt;p&gt;好像是 打开设置－关于本机－安卓版本号，然后连续点击七次（谁能解释一下为什么要点击七次吗？）&lt;/p&gt;

&lt;p&gt;然后返回上一界面，就应该能看到有个开发者模式&lt;/p&gt;

&lt;p&gt;点击进入，把usb调试的选项钩上&lt;/p&gt;

&lt;p&gt;然后链接usb到电脑&lt;/p&gt;

&lt;p&gt;电脑打开chrome浏览器&lt;/p&gt;

&lt;p&gt;在地址栏上输入 chrome://inspect/#devices&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/20150529/chrome-debug.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我手上也没有安卓真机，没法截图&lt;/p&gt;

&lt;p&gt;在安卓机上的浏览器打开网页，如上图就有手机当前打开网页的选项&lt;/p&gt;

&lt;p&gt;可以通过点击选项的inspect按钮，打开调试&lt;/p&gt;

&lt;p&gt;接下来的调试方法就和在chrome打开网页的调试方法一样了&lt;/p&gt;

&lt;p&gt;##微信调试&lt;/p&gt;

&lt;p&gt;微信调试通过下载是微信官方提供给微信web开发者的调试应用来实现的&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/wiki/10/e5f772f4521da17fa0d7304f68b97d7e.html&quot;&gt;微信web开发者工具下载传送们&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/20150529/wx-download.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下载之后打开应用&lt;/p&gt;
</description>
        <pubDate>Sun, 29 May 2016 00:00:00 +0800</pubDate>
        <link>http://chenbingshu.com///2016/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E8%80%85%E5%B8%B8%E7%94%A8%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</link>
        <guid isPermaLink="true">http://chenbingshu.com///2016/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E8%80%85%E5%B8%B8%E7%94%A8%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</guid>
        
        
      </item>
    
      <item>
        <title>Chrome插件开发</title>
        <description>&lt;p&gt;#chrome插件开发&lt;/p&gt;

&lt;p&gt;之前因为公司业务的需求，阉割了在web端的账号密码登录流程，只能通过发送短信验证码的方式来登录，尽管如此，原来老的登录接口还在。为了提高开发效率，特别是在测试环节，开发了一个chrome插件来继续使用老版的接口来实现用户的帐号密码登录&lt;/p&gt;

&lt;p&gt;##开发chrome extension的需要知道的基本知识&lt;/p&gt;

&lt;p&gt;chrome插件是主要用三部分构成&lt;/p&gt;

&lt;p&gt;*.浏览器地址栏右侧图标点击弹出的窗口页
*.运行在后台的脚本文件
*.嵌入到当前访问页的脚本文件&lt;/p&gt;

&lt;p&gt;三个部分可通过chrome对象方法进行通信&lt;/p&gt;

&lt;h2 id=&quot;mainfest&quot;&gt;mainfest配置文件&lt;/h2&gt;

&lt;p&gt;首先创建一个文件夹，用于存放当前插件，然后创建一个mainfest.json文件
该文件主要是像chrome浏览器解释该插件需要哪些依赖
…..算了，先不写了，好困，下次再写吧
..这篇比较长,先放着呢,嗯&lt;/p&gt;
</description>
        <pubDate>Thu, 12 May 2016 00:00:00 +0800</pubDate>
        <link>http://chenbingshu.com///2016/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
        <guid isPermaLink="true">http://chenbingshu.com///2016/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
        
        
      </item>
    
      <item>
        <title>Performance Api在网页性能监测的使用和表现差异</title>
        <description>&lt;p&gt;##1. 为什么要做性能监测?&lt;/p&gt;

&lt;p&gt;著名的谁说过一句话，如果连性能问题在哪里都不知道，如何做优化？所以，性能监测很明显是为了性能优化！&lt;/p&gt;

&lt;p&gt;##2. Performance对象
html5提供了很多有利于前端攻城狮的webapi&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API&quot;&gt;(技术文档)&lt;/a&gt;
以下内容主要讲的是webapi的performace接口及相关使用&lt;/p&gt;

&lt;p&gt;在chrome控制台打印window.performance,可查看performance提供的api,如图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/20150510/obj.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;memory&lt;/strong&gt;	提供了3个参数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* jsHeapSizeLimit js内存使用大小限制
* totalJSHeapSize js总内存？？
* usedJSHeapSize  js已使用内存
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;navigation&lt;/strong&gt;对象提供了2个参数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* redirectCount
* type
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;redirectCount表示到达当前页面的重定向次数&lt;/p&gt;

&lt;p&gt;type&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0:正常的url访问或点击跳转&lt;/li&gt;
  &lt;li&gt;1:刷新页面&lt;/li&gt;
  &lt;li&gt;2:通过历史纪录访问当前页面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;onresourcetimingbufferfull&lt;/strong&gt;属性是一个事件监听函数，当&lt;strong&gt;resourcetimingbufferfull&lt;/strong&gt;事件被触发的时候调用。而
&lt;strong&gt;resourcetimingbufferfull&lt;/strong&gt;是在浏览器资源缓冲区蛮的时候触发&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;performance.onresourcetimingbufferfull = function(){}; **timing** 对象提供了一组页面资源加载过程中的用时参数,也是网页性能监测主要要用到的api


* 	connectEnd:1462861568320
* 	connectStart:1462861568320
* 	domComplete:1462861569995
* 	domContentLoadedEventEnd:1462861569578
* 	domContentLoadedEventStart:1462861569528
* 	domInteractive:1462861569528
* 	domLoading:1462861568659
* 	domainLookupEnd:1462861568320
* 	domainLookupStart:1462861568320
* 	fetchStart:1462861568320
* 	loadEventEnd:1462861570046
* 	loadEventStart:1462861569995
* 	navigationStart:1462861567902
* 	redirectEnd:0
* 	redirectStart:0
* 	requestStart:1462861568322
* 	responseEnd:1462861569171
* 	responseStart:1462861568656
* 	secureConnectionStart:0
* 	unloadEventEnd:0
* 	unloadEventStart:0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以下是来找磨叽啦（&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Performance&quot;&gt;mozilla&lt;/a&gt;）的一张关于这些参数的计时起止点:
&lt;img src=&quot;/images/post/20150510/illustration.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体资源的性能监测方法 getEntries():
通过该方法，可以获取到所有资源的加载用时等参数
var sourceEntries = window.performance.getEntries();
打印一下sourceEntries数组，可以获取到其成员包含以下属性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;connectEnd:119.33500000000001
connectStart:119.33500000000001
domainLookupEnd:119.33500000000001
domainLookupStart:119.33500000000001
duration:106.41499999999999
entryType:&quot;resource&quot;
fetchStart:119.33500000000001
initiatorType:&quot;link&quot;
name:&quot;http://****/m/css/common_lib_****/less/common/***.css&quot;
redirectEnd:0
redirectStart:0
requestStart:206.28000000000003
responseEnd:225.75
responseStart:215.60000000000002
secureConnectionStart:0
startTime:119.33500000000001
workerStart:0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;该方法能够获取到的资源有css,js,img,xmlhttprequest。这个方法基本能满足网页性能监测的要求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;打点方法:performance.now()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当然，如果以上的timing对象提供的参数不能满足你的特殊监测要求，你还可以使用performance的now方法来定制时间监测点；
如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var startTime = performance.now();
&amp;lt;script src=&#39;http://*****.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
var endTime = performance.now();
var jsLoadTime = endTime - startTime; 可以大致统计到js资源加载的时间
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##3. 浏览器支持&amp;amp;兼容
&lt;img src=&quot;/images/post/20150510/support.png&quot; alt=&quot;image&quot; /&gt;
在用于项目中使用的时候，发现getEntries方法紧在chrome支持，用于移动端性能监测时候，getEntries也只能在安卓手机获取到资源的时间参数，具体的资源还是只能靠打点来实现。我有什么办法呢？没有。做到后面发现主要的群体ios不能监测到。。。。白做了！！！&lt;/p&gt;
</description>
        <pubDate>Tue, 10 May 2016 18:10:11 +0800</pubDate>
        <link>http://chenbingshu.com///2016/performance_api%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E8%A1%A8%E7%8E%B0%E5%B7%AE%E5%BC%82/</link>
        <guid isPermaLink="true">http://chenbingshu.com///2016/performance_api%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E8%A1%A8%E7%8E%B0%E5%B7%AE%E5%BC%82/</guid>
        
        <category>性能监测</category>
        
        <category>performance</category>
        
        <category>兼容</category>
        
        
        <category>前端</category>
        
      </item>
    
  </channel>
</rss>
